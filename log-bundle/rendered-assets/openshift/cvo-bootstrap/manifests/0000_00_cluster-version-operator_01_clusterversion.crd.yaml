apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: clusterversions.config.openshift.io
spec:
  group: config.openshift.io
  versions:
  - name: v1
    served: true
    storage: true
  scope: Cluster
  subresources:
    status: {}
  names:
    plural: clusterversions
    singular: clusterversion
    kind: ClusterVersion
  additionalPrinterColumns:
  - name: Version
    type: string
    JSONPath: .status.history[?(@.state=="Completed")].version
  - name: Available
    type: string
    JSONPath: .status.conditions[?(@.type=="Available")].status
  - name: Progressing
    type: string
    JSONPath: .status.conditions[?(@.type=="Progressing")].status
  - name: Since
    type: date
    JSONPath: .status.conditions[?(@.type=="Progressing")].lastTransitionTime
  - name: Status
    type: string
    JSONPath: .status.conditions[?(@.type=="Progressing")].message
  validation:
    openAPIV3Schema:
      description: ClusterVersion is the configuration for the ClusterVersionOperator.
        This is where parameters related to automatic updates can be set.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          description: ObjectMeta is metadata that all persisted resources must have,
            which includes all objects users must create.
          properties:
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
            clusterName:
              description: The name of the cluster which the object belongs to. This
                is used to distinguish resources with same name and namespace in different
                clusters. This field is not set anywhere right now and apiserver is
                going to ignore it if set in create or update request.
              type: string
            creationTimestamp:
              description: "CreationTimestamp is a timestamp representing the server
                time when this object was created. It is not guaranteed to be set
                in happens-before order across separate operations. Clients may not
                set this value. It is represented in RFC3339 form and is in UTC. \n
                Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
              format: date-time
              type: string
            deletionGracePeriodSeconds:
              description: Number of seconds allowed for this object to gracefully
                terminate before it will be removed from the system. Only set when
                deletionTimestamp is also set. May only be shortened. Read-only.
              format: int64
              type: integer
            deletionTimestamp:
              description: "DeletionTimestamp is RFC 3339 date and time at which this
                resource will be deleted. This field is set by the server when a graceful
                deletion is requested by the user, and is not directly settable by
                a client. The resource is expected to be deleted (no longer visible
                from resource lists, and not reachable by name) after the time in
                this field, once the finalizers list is empty. As long as the finalizers
                list contains items, deletion is blocked. Once the deletionTimestamp
                is set, this value may not be unset or be set further into the future,
                although it may be shortened or the resource may be deleted prior
                to this time. For example, a user may request that a pod is deleted
                in 30 seconds. The Kubelet will react by sending a graceful termination
                signal to the containers in the pod. After that 30 seconds, the Kubelet
                will send a hard termination signal (SIGKILL) to the container and
                after cleanup, remove the pod from the API. In the presence of network
                partitions, this object may still exist after this timestamp, until
                an administrator or automated process can determine the resource is
                fully terminated. If not set, graceful deletion of the object has
                not been requested. \n Populated by the system when a graceful deletion
                is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
              format: date-time
              type: string
            finalizers:
              description: Must be empty before the object is deleted from the registry.
                Each entry is an identifier for the responsible component that will
                remove the entry from the list. If the deletionTimestamp of the object
                is non-nil, entries in this list can only be removed.
              items:
                type: string
              type: array
            generateName:
              description: "GenerateName is an optional prefix, used by the server,
                to generate a unique name ONLY IF the Name field has not been provided.
                If this field is used, the name returned to the client will be different
                than the name passed. This value will also be combined with a unique
                suffix. The provided value has the same validation rules as the Name
                field, and may be truncated by the length of the suffix required to
                make the value unique on the server. \n If this field is specified
                and the generated name exists, the server will NOT return a 409 -
                instead, it will either return 201 Created or 500 with Reason ServerTimeout
                indicating a unique name could not be found in the time allotted,
                and the client should retry (optionally after the time indicated in
                the Retry-After header). \n Applied only if Name is not specified.
                More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
              type: string
            generation:
              description: A sequence number representing a specific generation of
                the desired state. Populated by the system. Read-only.
              format: int64
              type: integer
            initializers:
              description: "An initializer is a controller which enforces some system
                invariant at object creation time. This field is a list of initializers
                that have not yet acted on this object. If nil or empty, this object
                has been completely initialized. Otherwise, the object is considered
                uninitialized and is hidden (in list/watch and get calls) from clients
                that haven't explicitly asked to observe uninitialized objects. \n
                When an object is created, the system will populate this list with
                the current set of initializers. Only privileged users may set or
                modify this list. Once it is empty, it may not be modified further
                by any user. \n DEPRECATED - initializers are an alpha field and will
                be removed in v1.15."
              properties:
                pending:
                  description: Pending is a list of initializers that must execute
                    in order before this object is visible. When the last pending
                    initializer is removed, and no failing result is set, the initializers
                    struct will be set to nil and the object is considered as initialized
                    and visible to all clients.
                  items:
                    description: Initializer is information about an initializer that
                      has not yet completed.
                    properties:
                      name:
                        description: name of the process that is responsible for initializing
                          this object.
                        type: string
                    required:
                    - name
                    type: object
                  type: array
                result:
                  description: If result is set with the Failure field, the object
                    will be persisted to storage and then deleted, ensuring that other
                    clients can observe the deletion.
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                      type: string
                    code:
                      description: Suggested HTTP return code for this status, 0 if
                        not set.
                      format: int32
                      type: integer
                    details:
                      description: Extended data associated with the reason.  Each
                        reason may define its own extended details. This field is
                        optional and the data returned is not guaranteed to conform
                        to any schema except that defined by the reason type.
                      properties:
                        causes:
                          description: The Causes array includes more details associated
                            with the StatusReason failure. Not all StatusReasons may
                            provide detailed causes.
                          items:
                            description: StatusCause provides more information about
                              an api.Status failure, including cases when multiple
                              errors are encountered.
                            properties:
                              field:
                                description: "The field of the resource that has caused
                                  this error, as named by its JSON serialization.
                                  May include dot and postfix notation for nested
                                  attributes. Arrays are zero-indexed.  Fields may
                                  appear more than once in an array of causes due
                                  to fields having multiple errors. Optional. \n Examples:
                                  \  \"name\" - the field \"name\" on the current
                                  resource   \"items[0].name\" - the field \"name\"
                                  on the first array entry in \"items\""
                                type: string
                              message:
                                description: A human-readable description of the cause
                                  of the error.  This field may be presented as-is
                                  to a reader.
                                type: string
                              reason:
                                description: A machine-readable description of the
                                  cause of the error. If this value is empty there
                                  is no information available.
                                type: string
                            type: object
                          type: array
                        group:
                          description: The group attribute of the resource associated
                            with the status StatusReason.
                          type: string
                        kind:
                          description: 'The kind attribute of the resource associated
                            with the status StatusReason. On some operations may differ
                            from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: The name attribute of the resource associated
                            with the status StatusReason (when there is a single name
                            which can be described).
                          type: string
                        retryAfterSeconds:
                          description: If specified, the time in seconds before the
                            operation should be retried. Some errors may indicate
                            the client must take an alternate action - for those errors
                            this field may indicate how long to wait before taking
                            the alternate action.
                          format: int32
                          type: integer
                        uid:
                          description: 'UID of the resource. (when there is a single
                            resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      type: object
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                      type: string
                    message:
                      description: A human-readable description of the status of this
                        operation.
                      type: string
                    metadata:
                      description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                      properties:
                        continue:
                          description: continue may be set if the user set a limit
                            on the number of items returned, and indicates that the
                            server has more data available. The value is opaque and
                            may be used to issue another request to the endpoint that
                            served this list to retrieve the next set of available
                            objects. Continuing a consistent list may not be possible
                            if the server configuration has changed or more than a
                            few minutes have passed. The resourceVersion field returned
                            when using this continue value will be identical to the
                            value in the first response, unless you have received
                            this token from an error message.
                          type: string
                        resourceVersion:
                          description: 'String that identifies the server''s internal
                            version of this object that can be used by clients to
                            determine when objects have changed. Value must be treated
                            as opaque by clients and passed unmodified back to the
                            server. Populated by the system. Read-only. More info:
                            https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        selfLink:
                          description: selfLink is a URL representing this object.
                            Populated by the system. Read-only.
                          type: string
                      type: object
                    reason:
                      description: A machine-readable description of why this operation
                        is in the "Failure" status. If this value is empty there is
                        no information available. A Reason clarifies an HTTP status
                        code but does not override it.
                      type: string
                    status:
                      description: 'Status of the operation. One of: "Success" or
                        "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status'
                      type: string
                  type: object
              required:
              - pending
              type: object
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            managedFields:
              description: "ManagedFields maps workflow-id and version to the set
                of fields that are managed by that workflow. This is mostly for internal
                housekeeping, and users typically shouldn't need to set or understand
                this field. A workflow can be the user's name, a controller's name,
                or the name of a specific apply path like \"ci-cd\". The set of fields
                is always in the version that the workflow used when modifying the
                object. \n This field is alpha and can be changed or removed without
                notice."
              items:
                description: ManagedFieldsEntry is a workflow-id, a FieldSet and the
                  group version of the resource that the fieldset applies to.
                properties:
                  apiVersion:
                    description: APIVersion defines the version of this resource that
                      this field set applies to. The format is "group/version" just
                      like the top-level APIVersion field. It is necessary to track
                      the version of a field set because it cannot be automatically
                      converted.
                    type: string
                  fields:
                    additionalProperties: true
                    description: Fields identifies a set of fields.
                    type: object
                  manager:
                    description: Manager is an identifier of the workflow managing
                      these fields.
                    type: string
                  operation:
                    description: Operation is the type of operation which lead to
                      this ManagedFieldsEntry being created. The only valid values
                      for this field are 'Apply' and 'Update'.
                    type: string
                  time:
                    description: Time is timestamp of when these fields were set.
                      It should always be empty if Operation is 'Apply'
                    format: date-time
                    type: string
                type: object
              type: array
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within each name must be unique.
                An empty namespace is equivalent to the \"default\" namespace, but
                \"default\" is the canonical representation. Not all objects are required
                to be scoped to a namespace - the value of this field for those objects
                will be empty. \n Must be a DNS_LABEL. Cannot be updated. More info:
                http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            ownerReferences:
              description: List of objects depended by this object. If ALL objects
                in the list have been deleted, this object will be garbage collected.
                If this object is managed by a controller, then an entry in this list
                will point to this controller, with the controller field set to true.
                There cannot be more than one managing controller.
              items:
                description: OwnerReference contains enough information to let you
                  identify an owning object. An owning object must be in the same
                  namespace as the dependent, or be cluster-scoped, so there is no
                  namespace field.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  blockOwnerDeletion:
                    description: If true, AND if the owner has the "foregroundDeletion"
                      finalizer, then the owner cannot be deleted from the key-value
                      store until this reference is removed. Defaults to false. To
                      set this field, a user needs "delete" permission of the owner,
                      otherwise 422 (Unprocessable Entity) will be returned.
                    type: boolean
                  controller:
                    description: If true, this reference points to the managing controller.
                    type: boolean
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - uid
                type: object
              type: array
            resourceVersion:
              description: "An opaque value that represents the internal version of
                this object that can be used by clients to determine when objects
                have changed. May be used for optimistic concurrency, change detection,
                and the watch operation on a resource or set of resources. Clients
                must treat these values as opaque and passed unmodified back to the
                server. They may only be valid for a particular resource or set of
                resources. \n Populated by the system. Read-only. Value must be treated
                as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
              type: string
            selfLink:
              description: SelfLink is a URL representing this object. Populated by
                the system. Read-only.
              type: string
            uid:
              description: "UID is the unique in time and space value for this object.
                It is typically generated by the server on successful creation of
                a resource and is not allowed to change on PUT operations. \n Populated
                by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
              type: string
          type: object
        spec:
          description: spec is the desired state of the cluster version - the operator
            will work to ensure that the desired version is applied to the cluster.
          properties:
            channel:
              description: channel is an identifier for explicitly requesting that
                a non-default set of updates be applied to this cluster. The default
                channel will be contain stable updates that are appropriate for production
                clusters.
              type: string
            clusterID:
              description: clusterID uniquely identifies this cluster. This is expected
                to be an RFC4122 UUID value (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
                in hexadecimal values). This is a required field.
              type: string
            desiredUpdate:
              description: "desiredUpdate is an optional field that indicates the
                desired value of the cluster version. Setting this value will trigger
                an upgrade (if the current version does not match the desired version).
                The set of recommended update values is listed as part of available
                updates in status, and setting values outside that range may cause
                the upgrade to fail. You may specify the version field without setting
                image if an update exists with that version in the availableUpdates
                or history. \n If an upgrade fails the operator will halt and report
                status about the failing component. Setting the desired update value
                back to the previous version will cause a rollback to be attempted.
                Not all rollbacks will succeed."
              properties:
                force:
                  description: "force allows an administrator to update to an image
                    that has failed verification, does not appear in the availableUpdates
                    list, or otherwise would be blocked by normal protections on update.
                    This option should only be used when the authenticity of the provided
                    image has been verified out of band because the provided image
                    will run with full administrative access to the cluster. Do not
                    use this flag with images that comes from unknown or potentially
                    malicious sources. \n This flag does not override other forms
                    of consistency checking that are required before a new update
                    is deployed."
                  type: boolean
                image:
                  description: image is a container image location that contains the
                    update. When this field is part of spec, image is optional if
                    version is specified and the availableUpdates field contains a
                    matching version.
                  type: string
                version:
                  description: version is a semantic versioning identifying the update
                    version. When this field is part of spec, version is optional
                    if image is specified.
                  type: string
              type: object
            overrides:
              description: overrides is list of overides for components that are managed
                by cluster version operator. Marking a component unmanaged will prevent
                the operator from creating or updating the object.
              items:
                description: ComponentOverride allows overriding cluster version operator's
                  behavior for a component.
                properties:
                  group:
                    description: group identifies the API group that the kind is in.
                    type: string
                  kind:
                    description: kind indentifies which object to override.
                    type: string
                  name:
                    description: name is the component's name.
                    type: string
                  namespace:
                    description: namespace is the component's namespace. If the resource
                      is cluster scoped, the namespace should be empty.
                    type: string
                  unmanaged:
                    description: 'unmanaged controls if cluster version operator should
                      stop managing the resources in this cluster. Default: false'
                    type: boolean
                required:
                - group
                - kind
                - name
                - namespace
                - unmanaged
                type: object
              type: array
            upstream:
              description: upstream may be used to specify the preferred update server.
                By default it will use the appropriate update server for the cluster
                and region.
              type: string
          required:
          - clusterID
          type: object
        status:
          description: status contains information about the available updates and
            any in-progress updates.
          properties:
            availableUpdates:
              description: availableUpdates contains the list of updates that are
                appropriate for this cluster. This list may be empty if no updates
                are recommended, if the update service is unavailable, or if an invalid
                channel has been specified.
              items:
                description: Update represents a release of the ClusterVersionOperator,
                  referenced by the Image member.
                properties:
                  force:
                    description: "force allows an administrator to update to an image
                      that has failed verification, does not appear in the availableUpdates
                      list, or otherwise would be blocked by normal protections on
                      update. This option should only be used when the authenticity
                      of the provided image has been verified out of band because
                      the provided image will run with full administrative access
                      to the cluster. Do not use this flag with images that comes
                      from unknown or potentially malicious sources. \n This flag
                      does not override other forms of consistency checking that are
                      required before a new update is deployed."
                    type: boolean
                  image:
                    description: image is a container image location that contains
                      the update. When this field is part of spec, image is optional
                      if version is specified and the availableUpdates field contains
                      a matching version.
                    type: string
                  version:
                    description: version is a semantic versioning identifying the
                      update version. When this field is part of spec, version is
                      optional if image is specified.
                    type: string
                type: object
              nullable: true
              type: array
            conditions:
              description: conditions provides information about the cluster version.
                The condition "Available" is set to true if the desiredUpdate has
                been reached. The condition "Progressing" is set to true if an update
                is being applied. The condition "Degraded" is set to true if an update
                is currently blocked by a temporary or permanent error. Conditions
                are only valid for the current desiredUpdate when metadata.generation
                is equal to status.generation.
              items:
                description: ClusterOperatorStatusCondition represents the state of
                  the operator's reconciliation functionality.
                properties:
                  lastTransitionTime:
                    description: lastTransitionTime is the time of the last update
                      to the current status object.
                    format: date-time
                    type: string
                  message:
                    description: message provides additional information about the
                      current condition. This is only to be consumed by humans.
                    type: string
                  reason:
                    description: reason is the reason for the condition's last transition.  Reasons
                      are CamelCase
                    type: string
                  status:
                    description: status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: type specifies the state of the operator's reconciliation
                      functionality.
                    type: string
                required:
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            desired:
              description: desired is the version that the cluster is reconciling
                towards. If the cluster is not yet fully initialized desired will
                be set with the information available, which may be an image or a
                tag.
              properties:
                force:
                  description: "force allows an administrator to update to an image
                    that has failed verification, does not appear in the availableUpdates
                    list, or otherwise would be blocked by normal protections on update.
                    This option should only be used when the authenticity of the provided
                    image has been verified out of band because the provided image
                    will run with full administrative access to the cluster. Do not
                    use this flag with images that comes from unknown or potentially
                    malicious sources. \n This flag does not override other forms
                    of consistency checking that are required before a new update
                    is deployed."
                  type: boolean
                image:
                  description: image is a container image location that contains the
                    update. When this field is part of spec, image is optional if
                    version is specified and the availableUpdates field contains a
                    matching version.
                  type: string
                version:
                  description: version is a semantic versioning identifying the update
                    version. When this field is part of spec, version is optional
                    if image is specified.
                  type: string
              type: object
            history:
              description: history contains a list of the most recent versions applied
                to the cluster. This value may be empty during cluster startup, and
                then will be updated when a new update is being applied. The newest
                update is first in the list and it is ordered by recency. Updates
                in the history have state Completed if the rollout completed - if
                an update was failing or halfway applied the state will be Partial.
                Only a limited amount of update history is preserved.
              items:
                description: UpdateHistory is a single attempted update to the cluster.
                properties:
                  completionTime:
                    description: completionTime, if set, is when the update was fully
                      applied. The update that is currently being applied will have
                      a null completion time. Completion time will always be set for
                      entries that are not the current update (usually to the started
                      time of the next update).
                    format: date-time
                    nullable: true
                    type: string
                  image:
                    description: image is a container image location that contains
                      the update. This value is always populated.
                    type: string
                  startedTime:
                    description: startedTime is the time at which the update was started.
                    format: date-time
                    type: string
                  state:
                    description: state reflects whether the update was fully applied.
                      The Partial state indicates the update is not fully applied,
                      while the Completed state indicates the update was successfully
                      rolled out at least once (all parts of the update successfully
                      applied).
                    type: string
                  verified:
                    description: verified indicates whether the provided update was
                      properly verified before it was installed. If this is false
                      the cluster may not be trusted.
                    type: boolean
                  version:
                    description: version is a semantic versioning identifying the
                      update version. If the requested image does not define a version,
                      or if a failure occurs retrieving the image, this value may
                      be empty.
                    type: string
                required:
                - completionTime
                - image
                - startedTime
                - state
                - verified
                type: object
              type: array
            observedGeneration:
              description: observedGeneration reports which version of the spec is
                being synced. If this value is not equal to metadata.generation, then
                the desired and conditions fields may represent from a previous version.
              format: int64
              type: integer
            versionHash:
              description: versionHash is a fingerprint of the content that the cluster
                will be updated with. It is used by the operator to avoid unnecessary
                work and is for internal use only.
              type: string
          required:
          - availableUpdates
          - desired
          - observedGeneration
          - versionHash
          type: object
      required:
      - spec
      type: object
  versions:
  - name: v1
    served: true
    storage: true
